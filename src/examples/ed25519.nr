use dep::std::println;

mod fp;
mod fq;
mod tecurve;

use fp::PrimeField as Fp;
use fq::PrimeField as Fq;
use tecurve::Point;
use tecurve::Curve;

struct Ed25519 {
    curve: Curve,
    cofactor: Fq
}

fn ed25519() -> Ed25519 {
    Ed25519 {
        curve: Curve::new(
            Fp::from_bytes(
                [
                    0xec, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f
                ]
            ),
            Fp::from_bytes(
                [
                    0xa3, 0x78, 0x59, 0x13, 0xca, 0x4d, 0xeb, 0x75, 
                    0xab, 0xd8, 0x41, 0x41, 0x4d, 0x0a, 0x70, 0x00, 
                    0x98, 0xe8, 0x79, 0x77, 0x79, 0x40, 0xc7, 0x8c, 
                    0x73, 0xfe, 0x6f, 0x2b, 0xee, 0x6c, 0x03, 0x52
                ]
            ),
            Point::from_affine( 
                Fp::from_bytes(
                    [
                        0x1a, 0xd5, 0x25, 0x8f, 0x60, 0x2d, 0x56, 0xc9, 
                        0xb2, 0xa7, 0x25, 0x95, 0x60, 0xc7, 0x2c, 0x69, 
                        0x5c, 0xdc, 0xd6, 0xfd, 0x31, 0xe2, 0xa4, 0xc0, 
                        0xfe, 0x53, 0x6e, 0xcd, 0xd3, 0x36, 0x69, 0x21
                    ]
                ),
                Fp::from_bytes(
                    [
                        0x58, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 
                        0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 
                        0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 
                        0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66
                    ]
                ),
            ),
        ),
        cofactor: Fq::from_u56(8)
    }
}

// TODO: Check if pubkey, sig_R is on curve and sig_s < L?
fn verify_signature(pubkey: Point, sig_R: Point, sig_s: Fq, msghash: Fq) -> bool {
    let Ed25519 { curve, cofactor } = ed25519();

    let R_prime = curve.sub(curve.mul(sig_s, curve.gen), curve.mul(msghash, pubkey));
    curve.mul(cofactor, curve.sub(sig_R, R_prime)).is_zero()
}

#[test]
fn test_ed25519_zero() {
    assert(Point::zero().is_zero());
}

#[test]
fn test_ed25519_add1() {
    let Ed25519 { curve, cofactor: _cofactor } = ed25519();

    let p = curve.add(Point::zero(), Point::zero());
    assert(p.is_zero());
}

#[test]
fn test_ed25519_add2() {
    let Ed25519 { curve, cofactor: _cofactor } = ed25519();

    let p = curve.add(curve.gen, Point::zero());
    assert(p.eq(curve.gen));
}

#[test]
fn test_ed25519_add3() {
    let Ed25519 { curve, cofactor: _cofactor } = ed25519();

    let p = Point::from_affine(Fp::zero(), Fp::one().neg());
    let q = curve.add(p, p);
    assert(q.is_zero());
}

#[test]
fn test_ed25519_double1() {
    let Ed25519 { curve, cofactor: _cofactor } = ed25519();

    let p = curve.double(Point::zero());
    assert(p.is_zero());
}

#[test]
fn test_ed25519_double2() {
    let Ed25519 { curve, cofactor: _cofactor } = ed25519();

    let p = Point::from_affine(Fp::zero(), Fp::one().neg());
    let q = curve.double(p);
    assert(q.is_zero());
}

#[test]
fn test_ed25519_mul1() {
    let Ed25519 { curve, cofactor: _cofactor } = ed25519();

    let p = curve.mul(Fq::one().double(), Point::zero());
    assert(p.is_zero());
}

#[test]
fn test_ed25519_mul2() {
    let Ed25519 { curve, cofactor: _cofactor } = ed25519();

    let p = curve.mul(Fq::zero(), curve.gen);
    assert(p.is_zero());
}

#[test]
fn test_ed25519_mul3() {
    let Ed25519 { curve, cofactor: _cofactor } = ed25519();

    let p = curve.mul(Fq::one(), curve.gen);
    assert(p.eq(curve.gen));
}

#[test]
fn test_ed25519_verification_preshashed() {
    let A = Point::from_affine( 
        Fp::from_bytes(
            [
                0xce, 0x45, 0x76, 0x77, 0xbd, 0x86, 0x27, 0xb1, 
                0x24, 0x7c, 0x18, 0x53, 0x72, 0xd4, 0x13, 0xc5, 
                0x20, 0xf6, 0xd0, 0x60, 0x8d, 0xe0, 0x97, 0x22, 
                0x29, 0x34, 0x9d, 0x2b, 0x9a, 0xe0, 0xd0, 0x55
            ]
        ),
        Fp::from_bytes(
            [
                0xd7, 0x5a, 0x98, 0x01, 0x82, 0xb1, 0x0a, 0xb7,
                0xd5, 0x4b, 0xfe, 0xd3, 0xc9, 0x64, 0x07, 0x3a,
                0x0e, 0xe1, 0x72, 0xf3, 0xda, 0xa6, 0x23, 0x25,
                0xaf, 0x02, 0x1a, 0x68, 0xf7, 0x07, 0x51, 0x1a
            ]
        ),
    );
    let R = Point::from_affine( 
        Fp::from_bytes(
            [
                0x2a, 0xc8, 0x59, 0x29, 0xe6, 0x44, 0xab, 0x81, 
                0xcf, 0xf3, 0xe6, 0x1c, 0xd0, 0x4b, 0x32, 0x82, 
                0x71, 0x83, 0x46, 0x7f, 0x12, 0xb3, 0x38, 0xc3, 
                0xfc, 0x65, 0x00, 0xd4, 0x09, 0xe3, 0x18, 0x62
            ]
        ),
        Fp::from_bytes(
            [
                0xe5, 0x56, 0x43, 0x00, 0xc3, 0x60, 0xac, 0x72, 
                0x90, 0x86, 0xe2, 0xcc, 0x80, 0x6e, 0x82, 0x8a, 
                0x84, 0x87, 0x7f, 0x1e, 0xb8, 0xe5, 0xd9, 0x74, 
                0xd8, 0x73, 0xe0, 0x65, 0x22, 0x49, 0x01, 0x55
            ]
        ),
    );
    let s = Fq::from_bytes(
        [
            0x5f, 0xb8, 0x82, 0x15, 0x90, 0xa3, 0x3b, 0xac, 
            0xc6, 0x1e, 0x39, 0x70, 0x1c, 0xf9, 0xb4, 0x6b, 
            0xd2, 0x5b, 0xf5, 0xf0, 0x59, 0x5b, 0xbe, 0x24, 
            0x65, 0x51, 0x41, 0x43, 0x8e, 0x7a, 0x10, 0x0b
        ]
    );
    let k = Fq::from_bytes(
        [
            0x86, 0xea, 0xbc, 0x8e, 0x4c, 0x96, 0x19, 0x3d, 
            0x29, 0x05, 0x04, 0xe7, 0xc6, 0x00, 0xdf, 0x6c, 
            0xf8, 0xd8, 0x25, 0x61, 0x31, 0xec, 0x2c, 0x13, 
            0x8a, 0x3e, 0x7e, 0x16, 0x2e, 0x52, 0x54, 0x04
        ]
    );

    assert(verify_signature(A, R, s, k));
}
